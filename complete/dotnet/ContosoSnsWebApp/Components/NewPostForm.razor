@using ContosoSnsWebApp.Models
@using ContosoSnsWebApp.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="card mb-4 shadow-sm">
    <div class="card-body">
        <h2 class="card-title h5 mb-3">새 포스트 작성</h2>
        <EditForm Model="newPostRequest" OnValidSubmit="HandleSubmitAsync" FormName="newPostForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="userName" class="form-label">사용자 이름</label>
                <InputText id="userName" class="form-control" @bind-Value="newPostRequest.UserName" @oninput="UserNameChanged" placeholder="이름을 입력하세요" required />
                <ValidationMessage For="@(() => newPostRequest.UserName)" />
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">내용</label>
                <InputTextArea id="content" class="form-control" @bind-Value="newPostRequest.Content" rows="3" placeholder="무슨 생각을 하고 있나요?" required />
                <ValidationMessage For="@(() => newPostRequest.Content)" />
            </div>

            <div class="mb-3">
                <label for="imageUrl" class="form-label">이미지 URL (선택 사항)</label>
                <InputText id="imageUrl" class="form-control" @bind-Value="newPostRequest.ImageUrl" placeholder="https://example.com/image.jpg" />
                <ValidationMessage For="@(() => newPostRequest.ImageUrl)" />
            </div>

            <Button Type="submit" Variant="primary" Disabled="isSubmitting">
                @(isSubmitting ? "등록 중..." : "포스트 등록")
            </Button>

             @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnPostCreated { get; set; }
    [Parameter] public string? InitialUserName { get; set; } // Passed from parent if needed

    private NewPostRequest newPostRequest = new(); // Initialize with parameterless constructor
    private bool isSubmitting = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        // Load username and set it in the request object
        var loadedUserName = await LoadUserNameFromLocalStorage() ?? InitialUserName ?? "";
        newPostRequest = new NewPostRequest { UserName = loadedUserName }; // Use object initializer
    }

    private async Task HandleSubmitAsync()
    {
        // Use newPostRequest.UserName directly
        if (isSubmitting || string.IsNullOrWhiteSpace(newPostRequest.UserName)) return;

        isSubmitting = true;
        errorMessage = null;
        StateHasChanged();

        // UserName is already part of newPostRequest

        try
        {
            var createdPost = await ApiService.CreatePostAsync(newPostRequest);
            if (createdPost != null)
            {
                // Reset form, keep username
                var currentUserName = newPostRequest.UserName; // Store username before reset
                newPostRequest = new() { UserName = currentUserName };
                await OnPostCreated.InvokeAsync();
            }
            else
            {
                errorMessage = "포스트 등록에 실패했습니다.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating post: {ex.Message}");
            errorMessage = "포스트 등록 중 오류가 발생했습니다.";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    // Add this method to handle username input changes and save to local storage
    private async Task UserNameChanged(ChangeEventArgs e)
    {
        var newUserName = e.Value?.ToString();
        if (!string.IsNullOrEmpty(newUserName))
        {
            newPostRequest.UserName = newUserName;
            await SaveUserNameToLocalStorage(newUserName);
        }
    }

    // Local Storage Interaction
    private async Task<string?> LoadUserNameFromLocalStorage()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userName");
        }
        catch (Exception ex) // Catch JSDisconnectedException or other errors
        {
            Console.Error.WriteLine($"Error loading username from local storage: {ex.Message}");
            return null;
        }
    }

    private async Task SaveUserNameToLocalStorage(string userName)
    {
         try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", userName);
        }
        catch (Exception ex)
        {
             Console.Error.WriteLine($"Error saving username to local storage: {ex.Message}");
        }
    }
}
