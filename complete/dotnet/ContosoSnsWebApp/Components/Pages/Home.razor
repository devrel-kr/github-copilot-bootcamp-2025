@page "/"
@using ContosoSnsWebApp.Models
@using ContosoSnsWebApp.Services
@using ContosoSnsWebApp.Components
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Contoso 아웃도어 소셜</PageTitle>

@* Header is now part of MainLayout *@

<main class="container mt-4">
    <div class="row g-4">
        @* Left Sidebar - Desktop Only *@
        <div class="col-lg-3 d-none d-lg-block">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="h5 card-title mb-3">Contoso 아웃도어</h2>
                    <p class="card-text text-muted mb-3">
                        최고 품질의 아웃도어 장비와 액세서리를 제공합니다.
                        자연을 탐험하고 모험을 즐기세요!
                    </p>
                    <hr class="my-3" />
                    <div>
                        <h3 class="h6 mb-2">인기 태그</h3>
                        <div class="d-flex flex-wrap gap-2">
                            <span class="badge bg-primary">#등산</span>
                            <span class="badge bg-success">#캠핑</span>
                            <span class="badge bg-warning text-dark">#트레킹</span>
                            <span class="badge bg-danger">#아웃도어</span>
                            <span class="badge bg-info text-dark">#백패킹</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* Main Content Area *@
        <div class="col-lg-6">
            @* New Post Form *@
            <NewPostForm OnPostCreated="LoadPostsAsync" InitialUserName="userName" />

            @* Post List *@
            <div>
                <h2 class="h4 mb-3">최근 포스트</h2>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mt-2">포스트를 불러오는 중...</p>
                    </div>
                }
                else if (posts == null || posts.Count == 0)
                {
                     <div class="text-center py-5 card shadow-sm">
                         <div class="card-body">
                            <p class="text-muted">아직 포스트가 없습니다.</p>
                            <p class="text-muted">첫 번째 포스트를 작성해 보세요!</p>
                         </div>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-column gap-4">
                        @foreach (var post in posts.OrderByDescending(p => p.CreatedAt))
                        {
                            <PostCard Post="post"
                                      UserName="userName"
                                      OnDeleteClick="HandleDeletePostAsync"
                                      OnCardClick="HandlePostClick"
                                      RefreshPosts="LoadPostsAsync" />
                        }
                    </div>
                }
            </div>
        </div>

        @* Right Sidebar - Desktop Only *@
        <div class="col-lg-3 d-none d-lg-block">
             <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h2 class="h5 card-title mb-3">신제품 소식</h2>
                    <ul class="list-unstyled mb-0">
                        <li class="mb-2 small">
                            <p class="fw-medium mb-0">새로운 경량 텐트 출시</p>
                            <p class="text-muted mb-0">초경량 2인용 텐트를 지금 만나보세요!</p>
                        </li>
                         <li class="mb-2 small">
                            <p class="fw-medium mb-0">여름 시즌 하이킹 부츠</p>
                            <p class="text-muted mb-0">더운 여름을 위한 특별 설계 부츠</p>
                        </li>
                         <li class="small">
                            <p class="fw-medium mb-0">방수 재킷 할인 이벤트</p>
                            <p class="text-muted mb-0">이번 주까지 전 제품 20% 할인</p>
                        </li>
                    </ul>
                </div>
            </div>
             <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="h5 card-title mb-3">사용 안내</h2>
                    <p class="small text-muted mb-2">
                        Contoso 아웃도어 제품과 관련된 경험을 공유하고 다른 사용자들과 소통하세요.
                    </p>
                    <ul class="small text-muted list-unstyled list-inside space-y-1">
                        <li><i class="bi bi-check-circle-fill text-success me-1"></i>제품 사진과 함께 리뷰 남기기</li>
                        <li><i class="bi bi-check-circle-fill text-success me-1"></i>다른 사용자 포스트에 댓글 달기</li>
                        <li><i class="bi bi-check-circle-fill text-success me-1"></i>유용한 팁과 노하우 공유하기</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</main>

@* Footer is now part of MainLayout *@

@* Post Detail Modal *@
@if (selectedPostId.HasValue)
{
    <PostDetail PostId="selectedPostId.Value"
                UserName="userName"
                OnClose="ClosePostDetail"
                OnDeleteSuccess="HandlePostDeletedFromDetail" />
}


@code {
    private List<Post>? posts;
    private bool isLoading = true;
    private string? errorMessage;
    private string? userName; // Store username locally
    private int? selectedPostId;

    protected override async Task OnInitializedAsync()
    {
        userName = await LoadUserNameFromLocalStorage();
        await LoadPostsAsync();
    }

    private async Task LoadPostsAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged(); // Update UI to show loading state

        try
        {
            posts = await ApiService.GetPostsAsync();
            if (posts == null)
            {
                 // ApiService already logs the error, set user-facing message
                 errorMessage = "포스트를 불러오는데 실패했습니다. API 서버가 실행 중인지 확인하세요.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading posts: {ex.Message}");
            errorMessage = "포스트를 불러오는 중 오류가 발생했습니다.";
            posts = null; // Ensure posts is null on error
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI with data or error
        }
    }

     private async Task HandleDeletePostAsync(int postId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "정말로 이 포스트를 삭제하시겠습니까?");
        if (!confirmed) return;

        try
        {
            var success = await ApiService.DeletePostAsync(postId);
            if (success)
            {
                posts?.RemoveAll(p => p.Id == postId);
                StateHasChanged(); // Update UI
            }
            else
            {
                 await JSRuntime.InvokeVoidAsync("alert", "포스트 삭제에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting post: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "포스트 삭제 중 오류가 발생했습니다.");
        }
    }

    private void HandlePostClick(int postId)
    {
        selectedPostId = postId;
        StateHasChanged();
    }

    private void ClosePostDetail()
    {
        selectedPostId = null;
        StateHasChanged();
    }

     private async Task HandlePostDeletedFromDetail()
    {
        // Called when delete is successful from the detail modal
        selectedPostId = null; // Close modal
        await LoadPostsAsync(); // Refresh the list
    }


    // Local Storage Interaction (Could be moved to a service)
    private async Task<string?> LoadUserNameFromLocalStorage()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "userName");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading username: {ex.Message}");
            return null;
        }
    }

    // UserName is set and saved by NewPostForm component now
}
