
// filepath: /workspaces/github-copilot-bootcamp-2025/dotnet/ContosoSnsWebApp/Components/PostCard.razor
@using ContosoSnsWebApp.Models
@using ContosoSnsWebApp.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="card mb-3 shadow-sm hover-shadow-lg" @onclick="HandleCardClick">
    @if (!string.IsNullOrEmpty(Post?.ImageUrl))
    {
        <div style="height: 12rem; overflow: hidden;">
            <img src="@Post.ImageUrl" alt="@($"{Post.UserName}'s post")" class="card-img-top" style="object-fit: cover; height: 100%; width: 100%;" />
        </div>
    }
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="fw-bold text-secondary">@Post?.UserName</span>
            <span class="text-muted small">@FormatDate(Post?.CreatedAt)</span>
        </div>
        <p class="card-text mb-3">@Post?.Content</p>
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex gap-2">
                <Button OnClick="HandleLikeToggle" Variant="@(isLiked ? "primary" : "outline")" Small="true" CssClass="d-flex align-items-center gap-1" Disabled="isLikeLoading">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="@(isLiked ? "currentColor" : "none")" class="bi bi-heart-fill" viewBox="0 0 16 16" stroke="currentColor" stroke-width="@(isLiked ? "0" : "1")">
                      <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314"/>
                    </svg>
                    <span>@likeCount</span>
                </Button>
                <Button Variant="outline" Small="true" CssClass="d-flex align-items-center gap-1">
                     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16">
                       <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
                       <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
                     </svg>
                    <span>@Post?.CommentCount</span>
                </Button>
            </div>
             @if (Post?.UserName == UserName)
            {
                <Button OnClick="HandleDeleteClick" Variant="danger" Small="true">
                    삭제
                </Button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public Post? Post { get; set; }
    [Parameter] public EventCallback<int> OnDeleteClick { get; set; }
    [Parameter] public EventCallback<int> OnCardClick { get; set; }
    [Parameter] public EventCallback RefreshPosts { get; set; } // Optional: To refresh list after like/unlike
    [Parameter] public string? UserName { get; set; }

    private bool isLiked = false; // In a real app, this should come from user-specific data
    private int likeCount = 0;
    private bool isLikeLoading = false;

    protected override void OnParametersSet()
    {
        if (Post != null)
        {
            likeCount = Post.LikeCount;
            // TODO: Determine initial 'isLiked' state based on current user
        }
    }

    private async Task HandleLikeToggle(MouseEventArgs e)
    {
        // e.StopPropagation(); // Prevent card click event
        if (isLikeLoading || Post == null || string.IsNullOrEmpty(UserName)) return;

        isLikeLoading = true;
        bool success = false;
        var likeRequest = new LikeRequest(UserName);

        try
        {
            if (isLiked)
            {
                success = await ApiService.UnlikePostAsync(Post.Id, likeRequest);
                if (success)
                {
                    likeCount = Math.Max(0, likeCount - 1);
                    isLiked = false;
                }
            }
            else
            {
                success = await ApiService.LikePostAsync(Post.Id, likeRequest);
                 if (success)
                {
                    likeCount++;
                    isLiked = true;
                }
            }
            // Optionally call RefreshPosts if counts need global update
            // await RefreshPosts.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling like: {ex.Message}");
            // Show error to user?
        }
        finally
        {
            isLikeLoading = false;
            StateHasChanged(); // Update UI
        }
    }

     private async Task HandleDeleteClick(MouseEventArgs e)
    {
        // e.StopPropagation(); // Prevent card click event
        if (Post != null)
        {
            await OnDeleteClick.InvokeAsync(Post.Id);
        }
    }

    private async Task HandleCardClick()
    {
        if (Post != null)
        {
            await OnCardClick.InvokeAsync(Post.Id);
        }
    }

    private string FormatDate(DateTime? date)
    {
        return date?.ToString("yyyy년 M월 d일") ?? string.Empty;
    }
}

<style>
    .hover-shadow-lg:hover {
        box-shadow: 0 1rem 3rem rgba(0,0,0,.175) !important;
        transition: box-shadow 0.3s ease-in-out;
    }
    .card {
        cursor: pointer;
    }
</style>
