
@using ContosoSnsWebApp.Models
@using ContosoSnsWebApp.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">포스트 상세 정보</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (isLoading)
                {
                    <p>포스트 로딩 중...</p>
                }
                else if (post == null)
                {
                    <div class="alert alert-danger">포스트를 불러오지 못했습니다.</div>
                }
                else
                {
                    <div class="mb-3">
                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <img src="@post.ImageUrl" alt="@($"{post.UserName}'s post")" class="img-fluid rounded mb-3" style="max-height: 400px; width: 100%; object-fit: contain;" />
                        }
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="fw-bold">@post.UserName</span>
                            <span class="text-muted small">@FormatDate(post.CreatedAt)</span>
                        </div>
                        <p>@post.Content</p>
                        <div class="d-flex justify-content-between align-items-center mt-3 text-muted small">
                             <span>좋아요 @post.LikeCount · 댓글 @post.CommentCount</span>
                             @if (post.UserName == UserName)
                             {
                                 <Button OnClick="HandleDeleteAsync" Variant="danger" Small="true" Disabled="isDeleting">
                                     @(isDeleting ? "삭제 중..." : "포스트 삭제")
                                 </Button>
                             }
                        </div>
                    </div>
                    <hr />
                    <CommentSection PostId="PostId" UserName="UserName" />
                }
            </div>
            <div class="modal-footer">
                <Button Variant="secondary" OnClick="CloseModal">닫기</Button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public int PostId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnDeleteSuccess { get; set; } // Notify parent on successful delete
    [Parameter] public string? UserName { get; set; } // Current user's name

    private Post? post;
    private bool isLoading = true;
    private bool isDeleting = false;

    protected override async Task OnParametersSetAsync()
    {
        // Load post details when PostId is set or changes
        if (PostId > 0 && (post == null || post.Id != PostId))
        {
            await LoadPostDetailsAsync();
        }
    }

    private async Task LoadPostDetailsAsync()
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            post = await ApiService.GetPostAsync(PostId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading post details: {ex.Message}");
            post = null; // Ensure post is null on error
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

     private async Task HandleDeleteAsync()
    {
        if (post == null || isDeleting) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "정말로 이 포스트를 삭제하시겠습니까?");
        if (!confirmed) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            var success = await ApiService.DeletePostAsync(post.Id);
            if (success)
            {
                await OnDeleteSuccess.InvokeAsync(); // Notify parent to refresh list
                await CloseModal(); // Close modal after successful deletion
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "포스트 삭제에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
             Console.Error.WriteLine($"Error deleting post: {ex.Message}");
             await JSRuntime.InvokeVoidAsync("alert", "포스트 삭제 중 오류가 발생했습니다.");
        }
        finally
        {
            isDeleting = false;
            // Avoid StateHasChanged if modal is closing anyway
            if (post != null) // Check if deletion failed
            {
                 StateHasChanged();
            }
        }
    }


    private async Task CloseModal()
    {
        post = null; // Clear post data when closing
        await OnClose.InvokeAsync();
    }

    private string FormatDate(DateTime? date)
    {
        return date?.ToString("yyyy년 M월 d일 HH:mm") ?? string.Empty;
    }
}
